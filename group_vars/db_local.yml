---
#####
# ansible/group_vars/db_local.yml
# common variables and settings for all DB machines
#

############################
#1. VM and libvirt section
############################


# virtualisation switch, default libvirtd
target_virtualization: libvirt   # libvirt | vmware

# SSH keys to inject to VM installation (local users, normally in some key vault or kerberos/IPA/... infrastructure)
# ansible_master_pubkeys:
#  - "{{ lookup('file', '/home/ansible_master/.ssh/id_ed25519.pub') }}" # on localhost permissions problem obviously

ansible_master_pubkeys:
  - "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBILiayOh8hknMLeYILupd3HetTQu116Sj03vY6FT7Ar ansible_master@thinkpad"
rocky_pubkeys:
  - "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') | default('') }}" # (user for first login if root not desired)

# Libvirt (qemu:///system) – common
libvirt_pool_name: "libvirt-images"
libvirt_pool_path: "/home/{{ lookup('env','USER') }}/libvirt-images"
libvirt_network_name: "default"

#using this commented line bellow means You download it from public repo, that means a lot of waiting
# better use local mirror (file, ftp, http)
#image_url: "https://download.rockylinux.org/pub/rocky/9/images/x86_64/Rocky-9-GenericCloud.latest.x86_64.qcow2"
image_url: ""   # skip downloading
base_image_name: "Rocky-9-GenericCloud.latest.x86_64.qcow2"

graphics: "vnc" # or tty, but vnc means you have a visual console like vCenter :)
autoport: true
serial_console: true

# SSH wait
ssh_user: rocky
ssh_port: 22
ssh_wait_timeout: 420

###
### VMware varables (for vmware, TBD)
###

vcenter_hostname: "vcenter.example.local"
vcenter_username: "admin@vsphere.local"
vcenter_password: "{{ vault_vcenter_password | default('') }}"
validate_certs: false
vmw_datacenter: "DatacenterXYZ"
vmw_cluster: "ClusterXYZ"
vmw_datastore: "DatastoreXYZ"
vmw_folder: "/DBs"
vmw_network: "VM Network"
vmw_template: "rocky-9"
vmw_cpu: 2
vmw_memory_mb: 2048
vmw_additional_disk_gb: 2




##################################
#2. OS config - common attributes
##################################

os_config:
  # tuned
  tuned_profile: "virtual-guest"
  sysctl:
    vm.swappiness: 10
    vm.dirty_background_ratio: 5
    vm.dirty_ratio: 20

  # LVM layout variables
  lvm_device: "/dev/vdb"
  pv_size: 20
  vg_name: "vg_data"
  lv_data_name: "lv_data_psql"
  lv_wal_name: "lv_log_psql"
  fstype: "xfs"
  mnt_data: "/data"
  mnt_wal: "/pgwal"
  data_percent: 80
  wal_percent: 20

  # SELinux
  manage_selinux: true
  selinux_state: "disabled"

  # limits
  limits:
    nofile_soft: 102400
    nofile_hard: 1048576
    nproc_soft: 4096
    nproc_hard: 16384
    memlock_soft: unlimited
    memlock_hard: unlimited



################################
#3. Postgresql install and config variables
################################


postgresql_version: 15
postgresql_from_pgdg: true

postgresql_data_directory: "/data/{{ postgresql_cluster_name }}"
postgresql_wal_root: "/pgwal/{{ postgresql_cluster_name }}"
postgresql_wal_directory: "{{ postgresql_wal_root }}/pg_wal"
postgresql_archive_dir:  "{{ postgresql_wal_root }}/archive"

postgresql_listen_addresses: ['*']
postgresql_port: 5432

# Locale/encoding
postgresql_lc_messages: "en_US.UTF-8"
postgresql_lc_monetary: "en_US.UTF-8"
postgresql_lc_numeric:  "en_US.UTF-8"
postgresql_lc_time:     "en_US.UTF-8"
postgresql_client_encoding: "UTF8"

# Auth and connection
postgresql_password_encryption: "scram-sha-256"
postgresql_max_connections: 50
postgresql_superuser_reserved_connections: 5

# SSL – soubory mimo PGDATA, pod /etc/ssl/postgresql/<cluster>/
postgresql_ssl_dir: "/etc/ssl/postgresql/{{ postgresql_cluster_name }}"
postgresql_ssl_cert_file: "{{ postgresql_ssl_dir }}/server.crt"
postgresql_ssl_key_file:  "{{ postgresql_ssl_dir }}/server.key"

# (volitelné, nech prázdné pokud nepoužíváš)
postgresql_ssl_ca_file:   ""
postgresql_ssl_crl_file:  ""
postgresql_ssl_crl_dir:   ""

#  SSL policy
postgresql_ssl: "on"
postgresql_ssl_min_protocol_version: "TLSv1.2"
postgresql_ssl_prefer_server_ciphers: "on"


# Logování
postgresql_logging_collector: "on"
postgresql_log_destination: "csvlog"
postgresql_log_directory: "log"

# WAL + checkpoint + archiv
postgresql_wal_level: "replica"
postgresql_archive_mode: "on"
postgresql_archive_command: "test -f {{ postgresql_archive_dir }}/%f || cp %p {{ postgresql_archive_dir }}/%f"
postgresql_archive_timeout: "0"
postgresql_max_wal_size: "8GB"
postgresql_min_wal_size: "1GB"
postgresql_checkpoint_timeout: "15min"
postgresql_checkpoint_completion_target: 0.9
postgresql_wal_compression: "lz4"

# Paměť auto
postgresql_memory_autotune: false #(switch to true if tasks/memory_autotune wanted; rest shold be "auto")
postgresql_shared_buffers: "1GB"
postgresql_effective_cache_size: "2GB"
postgresql_work_mem: "64MB"
postgresql_maintenance_work_mem: "512MB"
postgresql_autovacuum_work_mem: "128MB"
postgresql_huge_pages: "try" #(be sure to get 'on' on PROD)

# Security / public
postgresql_revoke_public_create: true

# WAL archiv cleanup via cron(60 % threshol)
wal_prune_enabled: true
wal_prune_target_usage_pct: 60
wal_prune_min_keep_hours: 24

# Cron schedule
wal_prune_cron_minute: "0"
wal_prune_cron_hour: "*/1"
wal_prune_cron_day: "*"
wal_prune_cron_month: "*"
wal_prune_cron_weekday: "*"




################################
# 4. Replication role variables
# ##############################

replication_user: replicator
replication_password: "Replikace_123" # ! normally should go to ansible-vault
replication_sslmode: require    # "encrypted with SSL"
