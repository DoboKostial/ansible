---
- name: Ensure SSL directory exists (owned by postgres)
  file:
    path: "{{ postgresql_ssl_dir }}"
    state: directory
    owner: postgres
    group: postgres
    mode: "0700"
  when: (postgresql_ssl | default('off')) | string in ['on','true','1','yes']

- name: Stat SSL key
  stat:
    path: "{{ postgresql_ssl_key_file }}"
  register: _ssl_key
  when: (postgresql_ssl | default('off')) | string in ['on','true','1','yes']

- name: Stat SSL cert
  stat:
    path: "{{ postgresql_ssl_cert_file }}"
  register: _ssl_crt
  when: (postgresql_ssl | default('off')) | string in ['on','true','1','yes']

# If certs are missing, lets generate self-signed and use them
- name: Generate self-signed SSL if missing
  when:
    - (postgresql_ssl | default('off')) | string in ['on','true','1','yes']
    - not (_ssl_key.stat.exists | default(false) and _ssl_crt.stat.exists | default(false))
  become_user: postgres
  shell: |
    set -euo pipefail
    umask 077
    openssl req -x509 -nodes -newkey rsa:4096 -sha256 -days 1095 \
      -subj "/CN={{ inventory_hostname }}" \
      -keyout "{{ postgresql_ssl_key_file }}" \
      -out   "{{ postgresql_ssl_cert_file }}"
    chmod 600 "{{ postgresql_ssl_key_file }}"
    chmod 644 "{{ postgresql_ssl_cert_file }}"

# Permissions setting regardless where are certs from
- name: Enforce permissions on SSL files
  file:
    path: "{{ item.path }}"
    owner: postgres
    group: postgres
    mode: "{{ item.mode }}"
    state: file
  loop:
    - { path: "{{ postgresql_ssl_key_file }}",  mode: "0600" }
    - { path: "{{ postgresql_ssl_cert_file }}", mode: "0644" }
  when:
    - (postgresql_ssl | default('off')) | string in ['on','true','1','yes']
    - (_ssl_key.stat.exists | default(false)) or (_ssl_crt.stat.exists | default(false))

